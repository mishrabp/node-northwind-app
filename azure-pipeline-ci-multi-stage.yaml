# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript 

# Pipelibe only build docker image and uploads to Azure Container Registry @113136 NTT Azure Accoount

trigger:
- main

#what to clean up before the job runs (outputs | resources | all)
pool:
  name: "MyBuildAgents"
  vmImage: ubuntu-latest
  demand: node.js

variables:
- group: PipelineVariableGroup
#Build & Deployment flags used for debugging & troubleshooting
- name: bBuildInfrastructure
  value: false 
- name: bDeployToQA
  value: false 
- name: bDeployToProd
  value: true 
- name: bBuildDockerImage
  value: false 
#Pipeline Variables
- name: appServicePlan
  value: 'node-northwind-app-sp' 
- name: appServicePrefix
  value: 'node-northwind-app' 
- name: resourceGroup
  value: 'node-northwind-app-rg' 
- name: resourceLocation
  value: 'West US 2' 
- name: subscription
  value: 'Visual Studio Subscription - 113136' 
- name: artifactName
  value: 'drop'
#Terraform Storage Variables
- name: terraformContainer
  value: 'node-northwind-app-terraform' 
- name: terraformStorageAccount
  value: 'terraformsabibhu2021' 
- name: terraformStorageRG
  value: 'terraformstoragergp' 
#Container & K8 Variables
- name: privateContainerRegistry
  value: 'docker-azure-registry-private'
- name: privateRepository
  value: 'node-northwind-app'
- name: publicContainerRegistry
  value: 'docker-hub-registry-public'
- name: publicRepository
  value: 'bibhupmishra/node-northwind-app'
- name: tagName
  value: 'latest'
  


stages:
- stage: Build
  displayName: "Compile Code"
  jobs:
  - job: Compile
    displayName: 'Compile NPM Code' 
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install NodeJS Runtime'
    #Build the NodeJS code which will be deployed to QA "Azure App Service"
    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'
    - task: CopyFiles@2
      displayName: 'Copy application code to www folder'
      inputs:
        preserveTimestamp: true
        cleanTargetFolder: true  
        sourceFolder: '$(System.DefaultWorkingDirectory)'
        targetFolder: '$(build.artifactstagingdirectory)/www'
    - task: CopyFiles@2
      displayName: 'Copy terrraform files to terraform folder'
      inputs:
        SourceFolder: terraform
        TargetFolder: '$(build.artifactstagingdirectory)/terraform'
    - task: ArchiveFiles@2
      displayName: 'Create a deployable zip file from the www folder'
      inputs:
        rootFolderOrFile: '$(build.artifactstagingdirectory)/www'
        includeRootFolder: false        
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts & Binaries to the drop folder'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifact: ${{ variables.artifactName }}
        publishLocation: 'pipeline'
  - job: Dockerize
    displayName: 'Create a Docker Image & Publish to Azure Container Registry - 113136'
    condition:  eq('${{ variables.bBuildDockerImage }}', true) 
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: ${{ variables.privateContainerRegistry }}
    - task: Docker@2
      displayName: 'Push Docker Image to ACR (Private)'
      inputs:
        command: 'buildAndPush'
        containerRegistry: ${{ variables.privateContainerRegistry }}
        repository: ${{ variables.privateRepository }}
        Dockerfile: '$(System.DefaultWorkingDirectory)/**/Dockerfile'
        tags: ${{ variables.tagName }}
  - job: Dockerize2
    displayName: 'Create a Docker Image & Publish to Public Docker Hub Registry' 
    condition: eq('${{ variables.bBuildDockerImage }}', true) 
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Hub (Public)'
      inputs:
        command: login
        containerRegistry: ${{ variables.publicContainerRegistry }}
    - task: Docker@2
      displayName: 'Push Docker Image to Docker Hub (Public)'
      inputs:
        command: 'buildAndPush'
        containerRegistry: ${{ variables.publicContainerRegistry }}
        repository: ${{ variables.publicRegistry }}
        Dockerfile: '$(System.DefaultWorkingDirectory)/**/Dockerfile'
        tags: ${{ variables.tagName }}

- stage: Infrastructure
  displayName: 'Setup Infrastrucure in Azure'
  condition: eq('${{ variables.bBuildInfrastructure }}', true) 
  pool:
    name: "MyBuildAgents"
    vmImage: ubuntu-latest
    demand: node.js
  dependsOn: Build
  jobs:
  - template: azure-subpipeline-setup-appservice.yaml
    parameters:
      subscription: ${{ variables.subscription }}
      terraformstoragerg: ${{ variables.terraformStorageRG }}
      terraformstorageaccount: ${{ variables.terraformStorageAccount }}
      terraformcontainer: ${{ variables.terraformContainer }}


- stage: QA
  displayName: 'Deploy Code to QA Web App Service'
  condition: eq('${{ variables.bDeployToQA }}', true) 
  pool:
    name: "MyBuildAgents"
    vmImage: ubuntu-latest
    demand: node.js
  dependsOn: Infrastructure
  variables: 
    Environment: QA
  jobs:
  - template: azure-subpipeline-deploy-to-appservice.yaml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: '${{ variables.appServicePrefix }}-qa'
      subscription: ${{ variables.subscription }}

- stage: Production
  displayName: 'Deploy Code to Production Kubernetes Cluster'
  condition: eq('${{ variables.bDeployToProd }}', true) 
  pool:
    name: "MyBuildAgents"
    vmImage: ubuntu-latest
    demand: node.js
  dependsOn: QA
  variables: 
    Environment: Production
  jobs:
  - template: azure-subpipeline-deploy-to-k8-cluster.yaml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: '${{ variables.appServicePrefix }}-prod'
      subscription: ${{ variables.subscription }}
